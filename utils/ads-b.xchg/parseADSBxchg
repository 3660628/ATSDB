#!/usr/bin/perl

#
# This file is part of ATSDB.
#
# ATSDB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ATSDB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with ATSDB.  If not, see <http://www.gnu.org/licenses/>.
#

#
# parse the JSON output of files taken from:

# Historical Data (by date/time)
#
# If you want to download a historical record of all data received by ADSBexchange, this is the section for you.  Building on the 'Querying Live Data' section above, essentially, every 60 seconds, we issue the following JSON query and store the results: http://public-api.adsbexchange.com/VirtualRadar/AircraftList.json?trFmt=sa
# Essentially, this is a JSON of all aircraft, with 'short trails' activated. The short trail duration used in the historical data archive is 65 seconds.  This gives all the current information on the aircraft, plus any known positions, altitudes and timestamps for the previous 65 seconds.  Since this query is issued every 60 seconds, all known positions should be captured in the data. Please consult this page for an explanation of data field contents.
# This file is captured every 60 seconds, typically on the 30-second mark of any given minute. This generates 1,440 files daily, which then get zipped into a single archive per day.  The archive for the previous day is typically available by 0100Z (01:00 UTC) the following day. Data is available beginning on June 9, 2016. Daily files are currently in the neighborhood of 7.9 GB each. Transfer rates may be somewhat limited depending on the latency of your connection.
#
# For example, June 20th 2019 data can be downloaded at the following URL:
# http://history.adsbexchange.com/Aircraftlist.json/2016-06-20.zip
#
# Simply extrapolate the pattern for any subsequent date.
#
# For a full explanation of fields: https://www.adsbexchange.com/datafields

our $VERSION = "1.00";

sub usage
{
   my $err = shift and select STDERR;
   print <<EOU;
usage: $0 [-f <file>] [-atsdb] [-d] [-h]
      -f <file> ::= file name of the JSON data
      -atsdb    ::= output to interface with ATSDB (CSV format)
      -d        ::= debug mode
EOU
   exit $err;
}

# included modules
use Getopt::Long;
use DateTime;

my $file;
my $atsdb;
my $debug;
GetOptions(
   "help|?"   => sub { usage (0); },
   'file=s' => \$file,
   'atsdb' => \$atsdb,
   'd' => \$debug,
);

&usage() if (!$file);

sub time2_128sec {
   # input time in HH:MM:SS.ccc
   # calculate the time in 128 th of second
   my ($t) = @_;
   my ($tH, $tM, $tS) = split(":", $t);
   return sprintf("%d", 128 * (($tH * 60 + $tM) * 60 + $tS));
}

my %tt = (
   0 => 'unknown',
   1 => 'Mode-S',
   2 => 'ADS-B v?',
   3 => 'DO-260',
   4 => 'DO-260A',
   5 => 'DO-260B',
);

my %WTC = (
   0 => '',
   1 => 'L',
   2 => 'M',
   3 => 'H',
);

my %ads = ();

sub ads021 {
   my ($report) = @_;

   my ($csn,$ec,$fom,$tt,$hdg,$lat,$lng,$rcvr,$mA,$mC,$mS,$nacp,$nacv,$nic,$rocd,$sil,$tmrp,$tN,$trp,$ts,$vel,$gH,$mlat,$cos,$sA,$sH,$wtc) = ();

   foreach (split(",", $report)) {
      next if (!$_);
      if (/^Rcvr:/) {
         my ($srv,$feedType,$feed) = /Rcvr:(\d*)(\d)(\d{3})/;
         if ($atsdb) {
            $rcvr = "$srv$feedType$feed";
         } else {
            $rcvr = "$srv#$feedType#$feed";
         }
      }
      ($tmrp) = /PosTime:(\d{13})/ if (/^PosTime:/);
      if (/^Lat:/) {
         ($lat) = /Lat:(\S+)/;
         $lat = 0 if (abs($lat) > 90);
      }
      if (/^Long:/) {
         ($lng) = /Long:(\S+)/;
         $lng = 0 if (abs($lng) > 180);
      }
      if (/^Alt:/) {
         ($mC) = /Alt:(\S+)/; # unit: feet
         if (abs($mC) <= 99900) {
            $mC *= 0.01 if (!$atsdb);
         } else {
            $mC = "";
         }
      }
      ($gH) = /GAlt:(\S+)/ if (/^GAlt:/);
      ($sA) = /TAlt:(\S+)/ if (/^TAlt:/);
      ($sH) = /TTrk:(\S+)/ if (/^TTrk:/);
      if (/^WTC:/) {
         (my $type) = /WTC:(\S+)/;
         $wtc = $WTC{$type};
      }
      if (/^Icao:/) {
         ($mS) = /Icao:(\S+)/;
         $mS = lc $mS;
         $mS = hex $mS if ($atsdb); # convert to decimal
      }
      if (/^Sqk:/) {
         ($mA) = /Sqk:(\S+)/;
         $mA = oct "0$mA" if ($atsdb); # convert to decimal
      }
      ($csn) = /Call:(\S+)/ if (/^Call:/);
      $ts = "EMG" if (/^Help:true/);
      ($rocd) = /Vsi:(\S+)/ if (/^Vsi:/); # unit: feet/minute
      ($vel) = /Spd:(\S+)/ if (/^Spd:/); # unit: knots
      ($hdg) = /Trak:(\S+)/ if (/^Trak:/); # unit: degrees
      if (/^Gnd:true/) {
         if ($atsdb) {
            $trp = "Y";
         } else {
            $trp = "GBS";
         }
      }
      $mlat = "MLAT" if (/^Mlat:true/);
      if (/^Trt:/) {
         (my $type) = /Trt:(\S+)/;
         $tt = $tt{$type};
      }
      if (/^Cos:/) {
         # non-documented field:
         # Cos:[<lat>,<lng>,<time(epoch ms)>,<modeC>, next-field ]}
         ($cos = $report) =~ s/^.+Cos:\[//g;
         $cos =~ s/^([^]]+)\]\}/\1/g;
      }
   }

   $mC = "" if ($trp eq "GBS");

   if ($atsdb) {
      push @{ $ads{ $mS } }, "$lat;$lng;$tmrp;$mS;$mA;$mC;$csn;$fom;$ec;$trp;$rcvr;$vel;$hdg;$rocd;$gH;$sA" if ($tmrp);
   } else {
      push @{ $ads{ $mS } }, "$lat;$lng;$tmrp;$mS;$mA;$tN;$mlat;$mC;$csn;$fom;$ec;$trp;$rcvr;$ts;$vel;$hdg;$rocd;$tt;$gH;$sA;$sH;$wtc" if ($tmrp);
   }

   if ($cos) {
      my $count = 1;
      my %parm = ();
      foreach (split(",",$cos)) {
         $parm{$count} = $_;

         if ($count == 4) {
            my $lat = "";
            if ($parm{1} =~ /^\-?\d+\.\d+$/) {
               $lat = $parm{1};
               $lat = 0 if (abs($lat) > 90);
            }
            my $lng = "";
            if ($parm{2} =~ /^\-?\d+\.\d+$/) {
               $lng = $parm{2};
               $lng = 0 if (abs($lng) > 180);
            }

            my $tmrp = "";
            if ($parm{3} =~ /^\d+\.\d+$/) {
               ($tmrp = $parm{3}) =~ s/^(\d{13}).+$/\1/g;
            }

            my $mC = "";
            if ($parm{4} ne "null" and abs($parm{4}) <= 99900) {
               $mC = $parm{4};
               $mC /= 100 if (!$atsdb);
            }

            if ($atsdb) {
               push @{ $ads{ $mS } }, "$lat;$lng;$tmrp;$mS;$mA;$mC;$csn;$fom;$ec;$trp;$rcvr;$vel;$hdg;$rocd;$gH;$sA" if ($lat && $lng && $tmrp);
            } else {
               push @{ $ads{ $mS } }, "$lat;$lng;$tmrp;$mS;$mA;$tN;$mlat;$mC;$csn;$fom;$ec;$trp;$rcvr;$ts;$vel;$hdg;$rocd;$tt;$gH;$sA;$sH;$wtc" if ($lat && $lng && $tmrp);
            }
            $count = 0;
            %parm = ();
         }
         $count++;
      }
   }
}

# -------------------------------------------------------------------------------------------
# main
# -------------------------------------------------------------------------------------------

my $count = 0;
my $countMax = 0;
foreach (`ls ${file}-*Z.json`) {
   chop;
   my @nr = split("-");
   my $cm = pop(@nr);
   $cm =~ s/^(\d+)Z\.json$/\1/g;
   $countMax = $cm if ($cm > $countMax);
}

while ($count <= $countMax) {
   my $cnt = sprintf "%04d", $count;
   my $filei = "${file}-${cnt}Z.json";
   $count++;
   open(FILE, "<$filei") or next;
   print "PARSING: $filei\n";
   while(<FILE>) {
      chop;
      s%[\/\\"]%%g;
      ads021($_) if (/Lat:/ && /Long:/);
   }
   close(FILE);
}

# ---------------------------------------------------------------------------------
# dump contents
# ---------------------------------------------------------------------------------

mkdir "ADS-B";

# to be used with ATSDB parsing
my $recnum = 1;

# for denug information
my %timeDupe = ();
my %posDupe = ();

# dump parsed records
foreach $s_ (sort {$a cmp $b} keys %ads) {
   my $file = "ADS-B/ads-b_$s_.csv";
   print "dumping ADS-B file mS:$s_\n";
   open(FILE, ">$file") or die "$file: $!";
   if ($atsdb) {
      print FILE "REC_NUM;POS_LAT_DEG;POS_LONG_DEG;TOD;TARGET_ADDR;MODE3A_CODE;ALT_BARO_FT;CALLSIGN;POSITION_ACCURACY;EMITTER_CATEGORY;GROUND_BIT;DS_ID;GROUNDSPEED_KT;TRACK_ANGLE_DEG;BARO_VERTICAL_RATE_FTM;ALT_GEO_FT;FINAL_SEL_ALTITUDE_FT\n";
   } else {
      print FILE "lat_WGS84;lng_WGS84;tmrp;modeS;modeA;trkNr;mlat;modeC;csn;fom;ec;trp;rcvr;ts;vel;hdg;rocd;tt;gH;sA;sH;wtc\n";
   }

   my %time = ();
   foreach (@{$ads{$s_}}) {
      my @fields = split(";");
      $time{$fields[2]} = "$_"; # store reports with 'time' as key
   }

   foreach (sort {$a <=> $b} keys %time) {
      my ($lat_, $lng_, $t_, $mS_, @fields) = split(";", $time{$_});

      (my $sec = $t_) =~ s/^(\d{10}).+$/\1/g;
      (my $ms = $t_) =~ s/^\d{10}(\d+)$/\1/g;

      my $dt = "";
      eval { $dt = DateTime->from_epoch( epoch => $sec ) };
      warn "Problem! [$@] => t:$_ [$time{$_}]\n" if ($@);

      (my $hms = $dt) =~ s/^.+T//g;
      my $time = "$hms.$ms";

      $timeDupe{"$mS_#$time"}++;
      next if($timeDupe{"$mS_#$time"} > 1); # ignore repetitions with the same time

      $posDupe{"$mS_#$lat_;$lng_"}++;
      next if ($posDupe{"$mS_#$lat_;$lng_"} > 1); # ignore position repetitions

      if ($atsdb) {
         print FILE "" . join(";",($recnum, $lat_, $lng_, time2_128sec($time), $mS_, @fields)) . "\n";
         $recnum++;
      } else {
         print FILE "" . join(";",($lat_, $lng_, $time, $mS_, @fields)) . "\n";
      }
   }
   close FILE or die "$file: $!";
}

if ($debug) {
   #report time duplicates
   my %mStdupe = ();
   foreach (keys %timeDupe) {
      if ($timeDupe{$_} > 1) {
         ($mS,$t) = split("#");
         push @{ $mStdupe{ $mS } }, "$t;$timeDupe{$_}";
      }
   }
   foreach $s_ (sort {$a cmp $b} keys %mStdupe) {
      print STDERR "time duplicates [mS:$s_ : ";
      foreach (sort @{$mStdupe{$s_}}) {
         print STDERR "$_ ";
      }
      print STDERR "]\n";
   }

   # report position duplicates
   my %mSpdupe = ();
   foreach (keys %posDupe) {
      if ($posDupe{$_} > 1) {
         ($mS,$p) = split("#");
         push @{ $mSpdupe{ $mS } }, "$p;$posDupe{$_}";
      }
   }
   foreach $s_ (sort {$a cmp $b} keys %mSpdupe) {
      print STDERR "pos duplicates [mS:$s_ : ";
      foreach (sort @{$mSpdupe{$s_}}) {
         print STDERR "$_ ";
      }
      print STDERR "]\n";
   }
}
